# Test queries:

rosrun rosprolog rosprolog niklas_package

or:

rosrun rosprolog rosprolog knowrob_common
owl_parse('package://niklas_package/owl/objects_affordances_attributes.owl').
register_ros_package(niklas_package).

%%%%%%%%%%%

create_instance_from_class('http://knowrob.org/kb/objects_affordances_attributes.owl#Cup', 1,X).
owl_has(A, rdf:type, niklas:'Cup').
owl_has(niklas:'Cup_1', P, O).

%% Query
rdf_assert(niklas:'Cup_1', niklas:hasObjectMaterialType, X).
rdf_assert(A, niklas:'hasObjectMaterialType', X).

% Integrate new knowledge:
rdf_assert(niklas:'Plate_1', niklas:'hasObjectMaterialType', niklas:'Ceramic').
owl_has(A, niklas:hasObjectMaterialType, X).


owl_has(niklas:'Sprayer_1', P, O).
rdf_has(niklas:hasObjectMaterialType, rdfs:range, O).

# Plate QUERY
rdf_assert(A, niklas:hasObjectMaterialType, niklas:'Ceramic'), rdf_assert(A, niklas:hasObjectShapeType, niklas:'Round'), rdf_assert(A, niklas:hasObjectUsedFor, niklas:'EatingEvent').
A = niklas:'Plate_1'


# with computable (not working 100%..):

Material_str = 'Ceramic',
Shape_str = 'Round',
Affordance_str = 'DrinkingEvent'.

niklasComputables_utils:detectObject(A,Material_str, Shape_str, Attribute_str).

# NODE

roslaunch niklas_package niklas_computables_cpp.launch
rosrun niklas_package computablesCpp_node
